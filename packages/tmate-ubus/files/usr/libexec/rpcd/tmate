#!/usr/bin/env lua
--[[
  Copyright (C) 2013-2020 LibreMesh.org
  This is free software, licensed under the GNU AFFERO GENERAL PUBLIC LICENSE Version 3

]]--

local ubus = require "ubus"
local json = require 'luci.jsonc'
local utils = require 'lime.utils'

local TMATE_SOCK = "/tmp/tmate.sock"

local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end

function unix_socket_listening(name)
   return "" ~= utils.unsafe_shell("netstat -xl | grep "..TMATE_SOCK.." 2>/dev/null")
end

local function get_session(msg)
    if unix_socket_listening(TMATE_SOCK) then
        local rw_ssh = utils.unsafe_shell("tmate -S "..TMATE_SOCK.." display -p ''#{tmate_ssh}|head -c -1")
        local ro_ssh = utils.unsafe_shell("tmate -S "..TMATE_SOCK.." display -p ''#{tmate_ssh_ro}|head -c -1")
        local clients = utils.unsafe_shell("tmate -S "..TMATE_SOCK.." display -p ''#{tmate_num_clients}|head -c -1")

        utils.printJson({status = "ok", session = { rw_ssh = rw_ssh, ro_ssh = ro_ssh, clients = clients}})
    else
        utils.printJson({status = "error", msg = "no session"})
    end
    return
end

local function open_session(msg)
    utils.unsafe_shell("tmate -S "..TMATE_SOCK.." new-session -d")
    utils.unsafe_shell("tmate -S "..TMATE_SOCK.." wait tmate-ready")
    utils.printJson({status = "ok"})
    return
end

local function close_session(params)
    if unix_socket_listening(TMATE_SOCK) then
        utils.unsafe_shell("tmate -S "..TMATE_SOCK.." kill-session -t 0")
    end
    utils.printJson({ status = "ok" })
    return
end

local methods = {
    get_session = { no_params = 0 },
    open_session = { no_params = 0 },
    close_session = { no_params = 0 },
}

if arg[1] == 'list' then
    utils.printJson(methods)
end

if arg[1] == 'call' then
    local msg = utils.rpcd_readline()
    msg = json.parse(msg)
    if      arg[2] == 'get_session' then get_session(msg)
    elseif  arg[2] == 'open_session' then open_session(msg)
    elseif  arg[2] == 'close_session' then close_session(msg)
    else utils.printJson({ error = "Method not found" })
    end
end

